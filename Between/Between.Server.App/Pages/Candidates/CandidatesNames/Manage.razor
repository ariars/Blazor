@page "/Candidates/CandidateNames/Manage"

@inject IDbContextFactory<CandidateDbContext> _ContextFactory;
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStorage

@inject IJSRuntime JSRuntime

<PageTitle>CandidatesNames List</PageTitle>

<div class="row">
    <div class="col-md-12">
        <Between.Server.App.Pages.Candidates.CandidateNames.Components.EditorFormCom Model="@Model" Busy="@Busy" OnSubmitCallback="@OnSubmitCallback" />
    </div>
</div>

<hr />

@if (Models is null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>
                    First Name
                </th>
                <th>
                    Last Name
                </th>
                <th>
                    Middle Name
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var m in Models)
            {
                <tr>
                    <td>
                        @m.FirstName
                    </td>
                    <td>
                        @m.LastName
                    </td>
                    <td>
                        @m.MiddleName
                    </td>
                    <td class="text-center">
                        <input type="button" class="btn btn-danger btn-sm" value="Delete"
                       @onclick="() => DeleteBy(m)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    // 현재 페이지에서 사용할 모델 또는 컬렉션
    private CandidateName[]? Models { get; set; }

    /// <summary>
    /// 페이지 사이즈: 한 페이지에 몇 개의 레코드를 보여줄건지 결정
    /// </summary>
    public int PageSize { get; set; } = 10;

    /// <summary>
    /// 페이지 번호: 현재 보여줄 페이지 번호: 1 페이지, 2 페이지, ...
    /// </summary>
    [Parameter]
    public int? Page { get; set; } = 1; // PageNumber

    /// <summary>
    /// 페이지 인덱스: 현재 보여줄 페이지 번호의 인덱스(PageNumber - 1)
    /// </summary>
    public int PageIndex { get; set; } = 0;

    /// <summary>
    /// 총 몇 개의 페이지가 만들어지는지: Math.Ceiling(총 레코드 수 / 10(한 페이지에서 보여줄))
    /// </summary>
    public int PageCount { get; set; } = 1;

    /// <summary>
    /// 레코드 카운트: 현재 테이블에 몇 개의 레코드가 있는지 지정
    /// </summary>
    public int RecordCount { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }

    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            Page = 1;
            return;
        }

        PageIndex = 0;

        using var context = _ContextFactory.CreateDbContext();

        RecordCount = await context.CandidateName.CountAsync();

        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1;
        }

        Models = await context.CandidateName
            .OrderByDescending(it => it.Id)
            .ToArrayAsync();
    }

    protected async Task DeleteBy(CandidateName model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>(
            "confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidateName.Remove(model);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Empty
            }

            await DisplayData();
        }
    }

    public CandidateName? Model { get; set; }

    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
    }

    protected async Task FormSubmit()
    {
        if (Busy)
        {
            return;
        }

        Busy = true;

        try
        {
            if (Model is not null)
            {
                using var ctx = _ContextFactory.CreateDbContext();
                Model.UserId = "aaaa";
                ctx.CandidateName.Add(Model);
                ctx.SaveChanges();

                StatusMessage = "Success";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            Busy = false;

            Model = new();

            await DisplayData();
        }
    }

    protected void HandleInvalidSubmit()
    {
        StatusMessage = "";
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
}