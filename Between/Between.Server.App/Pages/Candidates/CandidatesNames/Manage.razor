@page "/Candidates/CandidateNames/Manage"

@inject IDbContextFactory<CandidateDbContext> _ContextFactory;
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStorage

@inject IJSRuntime JSRuntime

<PageTitle>CandidateName List</PageTitle>

@if (!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible fade show" role="alert">
        @StatusMessage
        <button type="button" class="close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-4">
        <Between.Server.App.Pages.Candidates.CandidateNames.Components.EditorForm Model="@Model" Busy="@Busy" OnSubmitCallback="@OnSubmitCallback" />
    </div>
</div>

<h1>Index</h1>

@if (CandidateNames is null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>FirstName</th>
                <th>LastName</th>
                <th>MiddleName</th>
                <th>UserId</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in CandidateNames)
            {
                <tr>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.MiddleName</td>
                    <td>@item.UserId</td>
                    <td>
                        <a href="/Candidates/CandidateNames/Edit/@item.Id" class="btn btn-primary btn-sm">Edit</a> |
                        <input type="button" class="btn btn-danger btn-sm" value="Delete" @onclick="() => DeleteBy(item)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <ul class="pagination">
        <li class="page-item @((Page == 1) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidateNames/@(Page - 1)">Prev</a>
        </li>
        @{
            int start = PageIndex / (int)5 * 5 + 1;
            int end = (PageIndex / (int)5 + 1) * 5;
        }
        @for (int i = start; i <= end; i++)
        {
            var currentNumber = i;

            if (i > PageCount)
            {
                break;
            }
            <li class="page-item @((i == Page) ? "active" : "")">
                <a class="page-link" href="/Candidates/CandidateNames/@(i)">@(i)</a>
            </li>
        }
        <li class="page-item @((Page == PageCount) ? "disabled" : "")">
            <a class="page-link" href="/Candidates/CandidateNames/@(Page + 1)">Next</a>
        </li>
    </ul>
}

@code {
    // 현재 페이지에서 사용할 모델 또는 컬렉션
    private CandidateName[]? CandidateNames { get; set; }

    // 페이지 사이즈 : 한 페이지에 몇 개의 레코드를 보여줄건지 결정
    public int PageSize { get; set; } = 10;

    // 페이지 번호: 현재 보여줄 페이지 번호: 1 페이지, 2 페이지, ...
    [Parameter]
    public int? Page { get; set; } = 1;

    // // 페이지 인덱스: 현재 보여줄 페이지 번호의 인덱스(PageNumber - 1)
    public int PageIndex { get; set; } = 0;

    // 총 몇 개의 페이지가 만들어지는지: Math.Ceiling(총 레코드 수 / 10(한 페이지에서 보여줄))
    public int PageCount { get; set; }

    // 레코드 카운트: 현재 테이블에 몇 개의 레코드가 있는지 지정
    public int RecordCount { get; set; }

    // 구성 요소가 시작할 준비가 되었을 때 호출
    //protected override async Task OnInitializedAsync()
    protected override async Task OnParametersSetAsync()
    {
        await DisplayData();
    }

    private async Task DisplayData()
    {
        if (Page is null or < 1)
        {
            NavigationManager.NavigateTo("/Candidates/CandidateNames/1");
            return;
        }

        PageIndex = Page.Value - 1;

        // Blazor에서는 반드시 DbContext facotry 사용 권장(필수)
        // https://learn.microsoft.com/en-us/ef/core/dbcontext-configuration/
        //Candidates/CandidateNames = await _Context.Candidates.ToArrayAsync();
        using var context = _ContextFactory.CreateDbContext(); // DbContext 생성

        RecordCount = await context.CandidateName.CountAsync();

        PageCount = Convert.ToInt32(Math.Ceiling(RecordCount / (double)PageSize));
        if (PageCount == 0)
        {
            PageCount = 1; // 데이터가 없으면 1 페이지로 초기화
        }

        if (Page > PageCount)
        {
            NavigationManager.NavigateTo($"/Candidates/CandidateNames/{PageCount}");
            return;
        }

        CandidateNames = await context.CandidateName
            .OrderByDescending(it => it.Id)
            .Skip(PageIndex * PageSize)
            .Take(PageSize)
            .ToArrayAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Page is not null)
        {
            // 현재 페이지 번호를 상태 데이터에 저장
            await ProtectedLocalStorage.SetAsync("Page", Page.Value);
        }
    }

    protected async Task DeleteBy(CandidateName model)
    {
        bool isDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this?");
        if (isDelete)
        {
            try
            {
                using var context = _ContextFactory.CreateDbContext();
                context.CandidateName.Remove(model);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // Empty
            }

            await DisplayData();
        }
    }
}



@code {
    public CandidateName? Model { get; set; }

    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
    }

    protected async Task FormSubmit()
    {
        if (Busy)
        {
            return;
        }

        Busy = true;

        try
        {
            if (Model is not null)
            {
                using var ctx = _ContextFactory.CreateDbContext();
                if (ctx.CandidateName is not null)
                {
                    ctx.CandidateName.Add(Model);
                    await ctx.SaveChangesAsync();
                }

                Model = new() { }; // 모델 초기화

                StatusMessage = "Success";
            }
        }
        catch (Exception)
        {
            StatusMessage = "Error";
        }
        finally
        {
            Busy = false;
            await DisplayData();
            StateHasChanged();
        }
    }

    protected void HandleInvalidSubmit()
    {
        StatusMessage = "";
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit();
        }
    }
}