@page "/Candidates/Create"
@inject IDbContextFactory<CandidateDbContext> _ContextFactory

<PageTitle>Candidate Create</PageTitle>

<h1>Create</h1>

<h4>Candidate</h4>
<hr />

@if (!String.IsNullOrEmpty(StatusMessage))
{
    var statusMessageClass = StatusMessage.StartsWith("Error") ? "danger" : "success";
    <div class="alert alert-@statusMessageClass alert-dismissible fade show" role="alert">
        @StatusMessage
        <button type="button" class="close" data-bs-dismiss="alert" 
            aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-4">
        @if (Model is not null)
        {
            <EditForm Model="@Model" OnValidSubmit="FormSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label class="control-label" for="txtFirstName">FirstName</label>
                    <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName" />
                    <ValidationMessage For="() => Model.FirstName" />
                </div>

                <div class="form-group">
                    <label class="control-label" for="txtLastName">LastName</label>
                    <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
                    <ValidationMessage For="@(() => Model.LastName)"></ValidationMessage>
                </div>

                <div class="form-group form-check">
                    <label class="form-check-label" for="IsEnrollment">
                        <InputCheckbox @bind-Value="Model.IsEnrollment" id="IsEnrollment" class="form-check-input" />
                        Is Enrollment
                    </label>
                </div>

                <div class="form-group">
                    <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />
                </div>
            </EditForm>
        }
    </div>
</div>

<div>
    <a href="/Candidates">Back to List</a>
</div>

@code {
    public Candidate? Model { get; set; }

    public string? StatusMessage { get; set; }

    public bool Busy { get; set; }

    protected override void OnInitialized()
    {
        Model = new();
    }

protected async Task FormSubmit()
{
    // 전송 버튼을 누르고 아직 저장 완료가 되지 않았으면 진행 종료: 중복 입력 방지
    if (Busy)
    {
        return; 
    }

    Busy = true;

    try
    {
        if (Model is not null)
        {
            Model.Age = 0;

            using(var ctx = _ContextFactory.CreateDbContext())
            {
                if(ctx.Candidate is not null)
                {
                    ctx.Candidate.Add(Model);
                    await ctx.SaveChangesAsync();
                }

                //await Task.Delay(5000);
                Model = new() { IsEnrollment = Model.IsEnrollment };
                StatusMessage = "Success";
            }
        }
    }
    catch (Exception)
    {
        StatusMessage = "Error";
    }
    finally
    {
        Busy = false;         
    }
}

    protected void HandleInvalidSubmit()
    {
        StatusMessage = ""; 
    }

    protected async Task OnSubmitCallback(bool isValid)
    {
        if (isValid)
        {
            await FormSubmit();
        }
        else
        {
            HandleInvalidSubmit(); 
        }
    }
}