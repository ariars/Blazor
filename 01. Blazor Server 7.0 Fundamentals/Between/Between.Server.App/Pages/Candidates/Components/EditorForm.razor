@namespace Between.Server.App.Pages.Candidates.Components

@if (Model is not null)
{
    <EditForm Model="@Model" OnValidSubmit="FormSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label class="control-label" for="txtFirstName">FirstName</label>
            <InputText @bind-Value="Model.FirstName" id="txtFirstName" class="form-control" placeholder="Enter FirstName" />
            <ValidationMessage For="() => Model.FirstName" />
        </div>

        <div class="form-group">
            <label class="control-label" for="txtLastName">LastName</label>
            <InputText @bind-Value="Model.LastName" id="txtLastName" class="form-control" placeholder="Enter LastName" />
            <ValidationMessage For="@(() => Model.LastName)"></ValidationMessage>
        </div>

        <div class="form-group form-check">
            <label class="form-check-label" for="IsEnrollment">
                <InputCheckbox @bind-Value="Model.IsEnrollment" id="IsEnrollment" class="form-check-input" />
                Is Enrollment
            </label>
        </div>

    <div class="form-group">
        @if (IsEdit)
        {
            <input type="submit" value="Edit" class="btn btn-primary" disabled="@Busy" />
            <input type="button" value="Cancel" class="btn btn-secondary" disabled="@Busy" @onclick="HandleCancel" />
        }
        else
        {
            <input type="submit" value="Create" class="btn btn-primary" disabled="@Busy" />
        }
    </div>
    </EditForm>
}

@code {
    [Parameter]
    public Candidate? Model { get; set; }

    [Parameter]
    public bool Busy { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmitCallback { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    protected async Task FormSubmit()
    {
        if (OnSubmitCallback.HasDelegate)
        {
            // 폼의 유효성이 통과되었으면 true를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(true);
        }
    }

    protected async Task HandleInvalidSubmit()
    {
        if (OnSubmitCallback.HasDelegate)
        {
            // 폼의 유효성이 통과되었으면 true를 부모 컴포넌트에게 전달
            await OnSubmitCallback.InvokeAsync(true);
        }
    }

    [Parameter]
    public EventCallback OnCancelCallback { get; set; }

    protected async Task HandleCancel()
    {
        if (OnCancelCallback.HasDelegate)
        {
            await OnCancelCallback.InvokeAsync();
        }
    }
}